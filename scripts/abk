#!/bin/sh
#
# Arch Linux Build Kernel script
#
# helper script for Signed Kernel Modules
# https://github.com/gene-git/Arch-SKM
#
# Stuart Cardall 20210812
#
############################################
## USER configuration ######################
## run script with no parameters for help ##
############################################
BUILD_DIR=~/build
GUI_EDITOR=mousepad
CONSOLE_EDITOR=nano
## custom USER VARS are sourced
#################################
USER_CONFIG=~/.config/abk.conf ##
######################################################
CMD=$1
KERNEL=$2
KBUILD_DIR=${BUILD_DIR}/${KERNEL}
CMD_LIST="update build install"
KERNEL_LIST="linux linux-hardened linux-lts linux-zen"
EXAMPLES=/usr/share/arch-sign-modules/PKGBUILD.example
######################################################

check_config() {
	local tmpfile=$(mktemp) x= variant=linux-hardened

	# USER configuration can be stored here
	if [ -f $USER_CONFIG ]; then
		source $USER_CONFIG
	fi

	# check command
	if ! echo "$CMD_LIST" | grep -qw "$CMD"; then
		printf "ERROR: missing valid command from: '$CMD_LIST' as 1st parameter\n" > $tmpfile
	fi

	# check kernel
	if ! echo "$KERNEL_LIST" | grep -qw "$KERNEL"; then
		printf "ERROR: missing kernel variant: 'linux-xxxx' as 2nd parameter\n" >> $tmpfile
	fi

	# check build dir
	if [ ! -d $BUILD_DIR ]; then
		mkdir -p $BUILD_DIR
		if [ $? != 0 [; then
			echo "ERROR: build directory: '$BUILD_DIR' cannot be created - exiting."
			exit 1
		fi
	fi

	# check editors
	for x in $GUI_EDITOR $CONSOLE_EDITOR; do
		if ! type "$x" &> /dev/null; then
			echo "Please set suitable \$EDITOR VARS in $USER_CONFIG (or install '$x')"
			echo "see also: /usr/share/arch-sign-modules/README.scripts.md"
			exit 1
		fi
	done

	# print kernels / usage
	if grep -q missing $tmpfile; then
		cat $tmpfile
		printf "\nAvailable kernels:\n\n"

		for x in $KERNEL_LIST; do
			echo "$x"
		done

		printf "\nTo build a kernel run commands '$CMD_LIST' in sequence with a kernel variant:\n\n"

		for x in $CMD_LIST; do
			echo "Example command: $0 $x $variant"
		done

		echo
		exit 1
	fi

	rm -f $tmpfile
}

install_kernel() {
	# helper function to install kernel & headers - but not docs
	local pkgver= pkglist= pkgdir=
	cd $KBUILD_DIR

	if ! grep -q KBUILD ./PKGBUILD; then
		echo "ERROR: cannot find kernel PKGBUILD in current directory"
		exit 1
	fi

	pkgver=$(grep ^pkgver PKGBUILD | cut -d\= -f 2)
	pkgdir=$(grep ^PKGDEST /etc/makepkg.conf | cut -d\= -f 2)

	pkglist=$(ls $pkgdir/*$pkgver* | grep -v doc)

	# overwrite required for multiple signed kernels
	sudo pacman -U $pkglist --overwrite /etc/dkms/kernel-sign.conf --overwrite /etc/dkms/kernel-sign.sh
}


update_kernel(){
	local status= tmp=$(mktemp -d)

	cd $BUILD_DIR

	# rsync an empty directory is much faster than rm -rf
	if [ -d $KERNEL ]; then
		printf "\ndeleting old kernel sources: $KBUILD_DIR...\n\n"
		sleep 1.15 && rsync --progress -a --delete $tmp/ $KBUILD_DIR/
		rmdir $tmp $KBUILD_DIR
	fi

	asp update $KERNEL
	status=$?

	if [ $status != 0 ]; then
		echo "ERROR: retrieving $KERNEL PKGBUILD failed."
		exit 1
	else
		asp export $KERNEL
	fi

	# edit files
	$GUI_EDITOR $EXAMPLES &
	$CONSOLE_EDITOR $KBUILD_DIR/PKGBUILD
}

build_kernel() {
	if [ ! -d $KBUILD_DIR ]; then
		echo "creating kernel build directory: $KBUILD_DIR"
		mkdir -p $KBUILD_DIR
	fi

	cd $KBUILD_DIR
	makepkg -s
}

main() {
	check_config

	case "$CMD" in
		install) install_kernel;;
		 update) update_kernel;;
		  build) time build_kernel;;
		      *) check_config;;
	esac
}

## START ##
main
